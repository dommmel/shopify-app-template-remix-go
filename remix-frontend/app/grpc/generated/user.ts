// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.26.1
// source: user.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "user";

export interface UserRequest {
  ID: number;
}

export interface TokenRequest {
  token: string;
}

export interface UserResponse {
  ID: number;
  accessToken: string;
  myshopifyDomain: string;
  scopes: string;
}

function createBaseUserRequest(): UserRequest {
  return { ID: 0 };
}

export const UserRequest = {
  encode(message: UserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== 0) {
      writer.uint32(8).int64(message.ID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ID = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return { ID: isSet(object.ID) ? globalThis.Number(object.ID) : 0 };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.ID !== 0) {
      obj.ID = Math.round(message.ID);
    }
    return obj;
  },

  create(base?: DeepPartial<UserRequest>): UserRequest {
    return UserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserRequest>): UserRequest {
    const message = createBaseUserRequest();
    message.ID = object.ID ?? 0;
    return message;
  },
};

function createBaseTokenRequest(): TokenRequest {
  return { token: "" };
}

export const TokenRequest = {
  encode(message: TokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: TokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenRequest>): TokenRequest {
    return TokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenRequest>): TokenRequest {
    const message = createBaseTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUserResponse(): UserResponse {
  return { ID: 0, accessToken: "", myshopifyDomain: "", scopes: "" };
}

export const UserResponse = {
  encode(message: UserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== 0) {
      writer.uint32(8).int64(message.ID);
    }
    if (message.accessToken !== "") {
      writer.uint32(18).string(message.accessToken);
    }
    if (message.myshopifyDomain !== "") {
      writer.uint32(26).string(message.myshopifyDomain);
    }
    if (message.scopes !== "") {
      writer.uint32(34).string(message.scopes);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ID = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.myshopifyDomain = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserResponse {
    return {
      ID: isSet(object.ID) ? globalThis.Number(object.ID) : 0,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      myshopifyDomain: isSet(object.myshopifyDomain) ? globalThis.String(object.myshopifyDomain) : "",
      scopes: isSet(object.scopes) ? globalThis.String(object.scopes) : "",
    };
  },

  toJSON(message: UserResponse): unknown {
    const obj: any = {};
    if (message.ID !== 0) {
      obj.ID = Math.round(message.ID);
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.myshopifyDomain !== "") {
      obj.myshopifyDomain = message.myshopifyDomain;
    }
    if (message.scopes !== "") {
      obj.scopes = message.scopes;
    }
    return obj;
  },

  create(base?: DeepPartial<UserResponse>): UserResponse {
    return UserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserResponse>): UserResponse {
    const message = createBaseUserResponse();
    message.ID = object.ID ?? 0;
    message.accessToken = object.accessToken ?? "";
    message.myshopifyDomain = object.myshopifyDomain ?? "";
    message.scopes = object.scopes ?? "";
    return message;
  },
};

export type UserServiceDefinition = typeof UserServiceDefinition;
export const UserServiceDefinition = {
  name: "UserService",
  fullName: "user.UserService",
  methods: {
    findOrCreateUserByEncodedSessionToken: {
      name: "FindOrCreateUserByEncodedSessionToken",
      requestType: TokenRequest,
      requestStream: false,
      responseType: UserResponse,
      responseStream: false,
      options: {},
    },
    getUser: {
      name: "GetUser",
      requestType: UserRequest,
      requestStream: false,
      responseType: UserResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface UserServiceImplementation<CallContextExt = {}> {
  findOrCreateUserByEncodedSessionToken(
    request: TokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserResponse>>;
  getUser(request: UserRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UserResponse>>;
}

export interface UserServiceClient<CallOptionsExt = {}> {
  findOrCreateUserByEncodedSessionToken(
    request: DeepPartial<TokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserResponse>;
  getUser(request: DeepPartial<UserRequest>, options?: CallOptions & CallOptionsExt): Promise<UserResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
